name: Sync Linear Ticket Status
on:
  push:
    branches-ignore: [main]
  pull_request:
    types: [opened, closed]
  pull_request_review:
    types: [submitted]

jobs:
  update-linear:
    runs-on: ubuntu-latest

    steps:
      - name: Extract event data
        run: |
          echo "EVENT_NAME=${{ github.event_name }}" >> $GITHUB_ENV
          echo "ACTION=${{ github.event.action }}" >> $GITHUB_ENV
          echo "HEAD_REF=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV
          echo "IS_MERGED=${{ github.event.pull_request.merged || false }}" >> $GITHUB_ENV
          echo "REVIEW_STATE=${{ github.event.review.state || '' }}" >> $GITHUB_ENV

      - name: Extract ISSUE_ID from branch name
        id: extract_id
        run: |
          BRANCH="${{ env.HEAD_REF }}"
          echo "üîç Branch: $BRANCH"

          if [[ "$BRANCH" =~ ([A-Z]+-[0-9]+) ]]; then
            ISSUE_ID="${BASH_REMATCH[1]}"
            echo "‚úÖ Found ISSUE_ID: $ISSUE_ID"
            echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
          else
            echo "‚ùå No ISSUE_ID in branch"
            exit 0
          fi

      - name: Decide NEW_STATE
        id: state
        run: |
          STATE=""
          case "${{ env.EVENT_NAME }}" in
            "push")
              STATE="In Progress"
              ;;
            "pull_request")
              if [ "${{ env.ACTION }}" == "opened" ]; then
                STATE="In Review"
              elif [ "${{ env.ACTION }}" == "closed" ] && [ "${{ env.IS_MERGED }}" == "true" ]; then
                STATE="Ready to Test"
              fi
              ;;
            "pull_request_review")
              if [ "${{ env.REVIEW_STATE }}" == "changes_requested" ]; then
                STATE="In Rework"
              fi
              ;;
          esac

          if [ -z "$STATE" ]; then
            echo "‚ÑπÔ∏è No matching state to apply"
            exit 0
          fi

          echo "üéØ Target Linear State: $STATE"
          echo "NEW_STATE=$STATE" >> $GITHUB_ENV

      - name: Fetch internal Linear issue ID
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          QUERY="query { issue(id: \"${ISSUE_ID}\") { id title team { id name } } }"
          REQUEST=$(jq -n --arg query "$QUERY" '{query: $query}')

          RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST")

          echo "$RESPONSE" | jq .

          ISSUE_INTERNAL_ID=$(echo "$RESPONSE" | jq -r '.data.issue.id')
          TEAM_ID=$(echo "$RESPONSE" | jq -r '.data.issue.team.id')

          if [ -z "$ISSUE_INTERNAL_ID" ] || [ "$ISSUE_INTERNAL_ID" == "null" ]; then
            echo "‚ùå Cannot find internal issue ID"
            exit 1
          fi

          echo "ISSUE_INTERNAL_ID=$ISSUE_INTERNAL_ID" >> $GITHUB_ENV
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV

      - name: Get Workflow State ID
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          QUERY="query { team(id: \"${TEAM_ID}\") { states { nodes { id name } } } }"
          REQUEST=$(jq -n --arg query "$QUERY" '{query: $query}')

          RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST")

          echo "$RESPONSE" | jq .

          STATE_ID=$(echo "$RESPONSE" | jq -r --arg name "${NEW_STATE}" '.data.team.states.nodes[] | select(.name == $name) | .id')

          if [ -z "$STATE_ID" ]; then
            echo "‚ùå State '${NEW_STATE}' not found."
            echo "$RESPONSE" | jq '.data.team.states.nodes[] | {id, name}'
            exit 1
          fi

          echo "STATE_ID=$STATE_ID" >> $GITHUB_ENV

      - name: Update Linear Issue State
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          MUTATION="mutation { issueUpdate(id: \"${ISSUE_INTERNAL_ID}\" input: { stateId: \"${STATE_ID}\" }) { success } }"
          REQUEST=$(jq -n --arg query "$MUTATION" '{query: $query}')

          RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST")

          echo "$RESPONSE" | jq .

          SUCCESS=$(echo "$RESPONSE" | jq -r '.data.issueUpdate.success')
          if [ "$SUCCESS" == "true" ]; then
            echo "‚úÖ Status updated to '${NEW_STATE}'"
          else
            echo "‚ùå Failed to update status"
            exit 1
          fi
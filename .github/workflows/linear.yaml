name: Update Linear Ticket Status

on:
  pull_request:
    types: [opened, reopened, closed]

jobs:
  update-linear:
    runs-on: ubuntu-latest

    steps:
      - name: Print raw branch and PR info
        run: |
          echo "HEAD_REF: ${{ github.head_ref }}"
          echo "PR_TITLE: ${{ github.event.pull_request.title }}"
          echo "EVENT: ${{ github.event.action }}"
          echo "REF: ${{ github.ref }}"

      - name: Extract ISSUE_ID from branch name
        id: extract_id
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "üîç Extracting ISSUE_ID from branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" =~ ([A-Z]+-[0-9]+) ]]; then
            ISSUE_ID="${BASH_REMATCH[1]}"
            echo "‚úÖ Found ISSUE_ID: $ISSUE_ID"
            echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
          else
            echo "‚ùå No ISSUE_ID found in branch name"
            exit 0
          fi

      - name: Debug extracted values
        run: |
          echo "üì¶ ISSUE_ID: ${{ env.ISSUE_ID }}"
          echo "üì¶ PR_EVENT: ${{ github.event.action }}"

      - name: Update Linear Ticket Status
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_KEY }}
          ISSUE_ID: ${{ env.ISSUE_ID }}
          PR_EVENT: ${{ github.event.action }}
        run: |
          echo "üöÄ Starting Linear update for $ISSUE_ID based on event $PR_EVENT"

          if [ -z "$ISSUE_ID" ]; then
            echo "‚ö†Ô∏è ISSUE_ID is empty, exiting"
            exit 0
          fi

          if [ "$PR_EVENT" == "opened" ] || [ "$PR_EVENT" == "reopened" ]; then
            NEW_STATE="In Review"
          elif [ "$PR_EVENT" == "closed" ]; then
            NEW_STATE="Done"
          else
            echo "‚ö†Ô∏è Unsupported PR event: $PR_EVENT"
            exit 0
          fi

          echo "üîÑ Setting new state: $NEW_STATE"

          echo "üì° Sending GraphQL query to get internal issue ID"
          QUERY=$(jq -n \'{query: "query { issue(id: \"ALI-19\") { id title team { id name } } }"}')

          RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$QUERY")

          echo "üì• Raw issue response:"
          echo "$RESPONSE" | jq .

          ISSUE_INTERNAL_ID=$(echo "$RESPONSE" | jq -r '.data.issue.id')
          TEAM_ID=$(echo "$RESPONSE" | jq -r '.data.issue.team.id')
          TEAM_NAME=$(echo "$RESPONSE" | jq -r '.data.issue.team.name')

          if [ "$ISSUE_INTERNAL_ID" == "null" ] || [ -z "$ISSUE_INTERNAL_ID" ]; then
            echo "‚ùå Failed to extract internal issue ID. Full response:"
            echo "$RESPONSE"
            exit 1
          fi

          echo "‚úÖ Found ISSUE_INTERNAL_ID: $ISSUE_INTERNAL_ID"
          echo "‚úÖ Found TEAM_ID: $TEAM_ID ($TEAM_NAME)"

          echo "üì° Fetching workflow states for team: $TEAM_ID"
          WORKFLOW_QUERY=$(jq -n --arg teamId "$TEAM_ID" \
            '{query: "query { workflowStates(teamId: \"" + $teamId + "\") { id name } }"}')

          WORKFLOW_RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$WORKFLOW_QUERY")

          echo "üì• Raw workflow state response:"
          echo "$WORKFLOW_RESPONSE" | jq .

          STATE_ID=$(echo "$WORKFLOW_RESPONSE" | jq -r --arg name "$NEW_STATE" '.data.workflowStates[] | select(.name == $name) | .id')

          if [ -z "$STATE_ID" ]; then
            echo "‚ùå State \"$NEW_STATE\" not found in workflow states:"
            echo "$WORKFLOW_RESPONSE" | jq '.data.workflowStates[] | {id, name}'
            exit 1
          fi

          echo "‚úÖ Found STATE_ID: $STATE_ID for state '$NEW_STATE'"

          echo "üì¶ Preparing mutation to update issue state"
          MUTATION=$(jq -n --arg id "$ISSUE_INTERNAL_ID" --arg stateId "$STATE_ID" \
            '{query: "mutation { issueUpdate(id: \"" + $id + "\" input: { stateId: \"" + $stateId + "\" }) { success } }"}')

          echo "üîß Mutation payload:"
          echo "$MUTATION" | jq .

          echo "üì° Sending mutation to Linear..."
          UPDATE_RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$MUTATION")

          echo "üì• Update response:"
          echo "$UPDATE_RESPONSE" | jq .

          SUCCESS=$(echo "$UPDATE_RESPONSE" | jq -r '.data.issueUpdate.success')
          if [ "$SUCCESS" = "true" ]; then
            echo "‚úÖ Issue status successfully updated"
          else
            echo "‚ùå Failed to update issue status"
            exit 1
          fi